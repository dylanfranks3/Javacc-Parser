PARSER_BEGIN(Assignment)

import java.util.*; //library import
import java.io.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;
import javax.script.ScriptException;


public class Assignment {
    private static boolean mainDefined = false; //checking whether there is a main function, to make sure only defined once, and importantly defined

    public static void main(String[] args) throws ParseException, TokenMgrError, ScriptException {
            try{
                // TODO check if the same function has been defined twice
                Scanner in = new Scanner(System.in);
                String s = "";
                ArrayList<String> eachLine = new ArrayList<String>(); // for evaluating the functions later
                while (in.hasNextLine()) {
                    String nL = in.nextLine();
                    s = s  + nL + "\n" ;
                    eachLine.add(nL);
                }
         
                InputStream is = new ByteArrayInputStream( s.getBytes() ); // parse it back into an INPUTstream
                Assignment parser = new Assignment(is); // give whatever is inputted to the parser
                parser.Start(); // start the grammer checking
                
                
                // now the evaluation
                int count = 1;
                Evaluater assigmentEval = new Evaluater();
                for (String i : eachLine){
                    String line = i.substring(4); // cutting out the def from each line
                    assigmentEval.addFunctionFromString(line, count);
                    count ++;}
                
                String decomposedIntoFunctions = assigmentEval.startEvalauting();

                if (decomposedIntoFunctions.equals("DIVERGENCE")){
                    System.out.println("PASS"); // if theres no error, woohoo, output PASS, otherwise error gets thrown
                    System.out.println("DIVERGENCE");
                }
                else{
                    int result = doOperations(decomposedIntoFunctions);
                    System.out.println("PASS"); // if theres no error, woohoo, output PASS, otherwise error gets thrown
                    System.out.println(result);
                }
                
            }

            catch (Throwable t){
                System.out.println("FAIL");
                String errorMessage = "Unknown pass error";
                int lineNo = 0;
                
                try {
                // Check which throwable was passed and output the apropriate error message
                     throw t;
                } 

                catch(ParseException e) {
                    errorMessage = intepretParseException(e); // passing the javacc error message into the intepreter to get a more granular result
                    lineNo = e.currentToken.beginLine; // getting the line no of the token
                } 

                catch(TokenMgrError e) {
                    Matcher matcher = Pattern.compile("line \\d+").matcher(e.getMessage());
                    if (matcher.find())
                        lineNo = Integer.parseInt(matcher.group().replace("line ", ""));


                    errorMessage = e.toString(); 
                }

                catch(CustomErrorMessage e) { // this is a custom error message thrown at run-time when dealing with grammer like if the main function is defined or parameters being consistent
                    errorMessage = e.getMessage(); // custom class method
                    lineNo = e.getLine(); // custom class method
                } 

                catch(ScriptException e){
                    errorMessage = "Divergent function call";
                    lineNo = 0;
                }

                
                System.err.println(errorMessage);
                System.err.println(lineNo);
        
            // Catching Throwable is ugly but JavaCC throws Error objects!
            }
    }

        private static String intepretParseException(ParseException e) { // given a parse exception, take the token and give a helpful string representation of the error
            // getting the relevent information from the thrown token
            String str = e.currentToken.image + e.currentToken.next.image;
            int thisToken = e.currentToken.kind;
            int nextToken = e.currentToken.next.kind;

            // Form the set of expected token kinds
            Set<Integer> expected = new HashSet();
            for (int i = 0; i <  e.expectedTokenSequences.length; i++) {
                expected.add(e.expectedTokenSequences[i][0]);
            }

            // Deciphering the parse exception from the thrown token 
            if (thisToken == SPACE && nextToken == EOL)
                return "Unexpected EOL";

            // Consecutive space check
            if (nextToken == SPACE){
                if (thisToken == SPACE){
                    return "Cannot have consecutive spaces, invalid space";
                }
                else{
                  return "Unexpected space";
                }
            }
            
            // checking for empty function defintion
            if (expected.contains(DEF))
                if (thisToken == EOF && nextToken == EOF)
                    return "Empty input";
                else
                    return "Missing keyword DEF";

            if (( thisToken == FUNCNAME) && expected.contains(SPACE) && nextToken != SPACE)
                return "Incorrect defintion of the function name, instead recieved: " + str;

            if ((thisToken == MAIN ) && expected.contains(SPACE) && nextToken != SPACE)
                return "Incorrect defintion of MAIN name, instead recieved: " + str;

            // function name errors
            if (expected.contains(MAIN) && expected.contains(FUNCNAME)) {
                if (nextToken == DEF)
                    return "Cannot use DEF as a function name";

                return "Missing function name";
            }

            // internal function expression errors
            if ((thisToken == NUM || thisToken == PARAM ) && (expected.contains(PLUS) && expected.contains(MULT) && expected.contains(SPACE)))
                return "Invalid expression inside function definition, expected an operation or an ending of the function definition, was given: " + str;

            if ((thisToken == MULT || thisToken == PLUS ) && (expected.contains(PARAM) && expected.contains(SPACE) && expected.contains(FUNCNAME)))
                return "Invalid expression next to operation inside function definition, was given: " + str;
                 
            // strange function name choices
            if ((thisToken == FUNCNAME || thisToken == MAIN) && expected.contains(SPACE))
                return "Invalid function name " + str;
            
            // no parameter
            if (expected.contains(PARAM) && expected.size() == 1)
                return "Missing parameter name";

            if (thisToken == PARAM) {
                if (expected.contains(SPACE) && expected.size() == 1) {
                    return "Invalid parameter name " + str;
                } else {
                    return "Invalid parameter reference " + str;
                }
            }

            // formatting errors
            if (expected.contains(LBRACE)) {
                if (nextToken == PARAM) {
                    return "MAIN definition should have no parameter";
                } else {
                    return "Missing {";
                }
            }

            if (thisToken == FUNCNAME && expected.contains(LBRACKET))
                return "Invalid function call " + str;

            if (expected.contains(NUM) && expected.contains(PARAM) && expected.contains(FUNCNAME)) {
                if (nextToken == MAIN)
                    return "Invalid call, MAIN cannot be called in a function expression";

                if (thisToken == LBRACKET) {
                    return "Invalid use of left bracket, only to be used with a function call";

                } else if (thisToken == SPACE) {
                    switch (nextToken) {
                        case EOF:
                            return "Function definition missing expression";
                
                    }
                }
            }
            
            // operand ordering error
            if (thisToken == FUNCNAME && (nextToken == PLUS || nextToken == MULT))
                return "Missing operand, was givenn: " + str;

            // catching the uncaught errors missed from above as the sieve tightens we can be more loose 
            if (expected.contains(RBRACKET))
                return "Missing a ), instead recieved: " + str;

            if (expected.contains(RBRACE))
                return "Expecting a } and instead recieved: " + str;

            if (expected.contains(SEMICOLON))
                return "Expecting a ; and instead recieved: " + str;

            switch (nextToken) {
                case EOL:
                    return "Unexpected new line";
                case EOF:
                    return "Unexpected end of file";
                case PARAM:
                    return "Unexpected parameter in main function definition, instead given: " + str;
            }

            if (expected.contains(SPACE) && expected.size() == 1)
                return "Expecting a space by string: " + str; 
            // final error classification if nothing has been caught 
            return "Unknown string: " + str;
    }

    
    private static int doOperations(String equation){
        String prevEq = equation;
        String newEq = equation;

        newEq = removeSingleBrackets(newEq); // remove all instances of (number)
        newEq = replaceMult(newEq); // replace all instances of num*num*num to num
        newEq = replacePlus(newEq); // replace all instances of num+num+num with num

        while (!newEq.equals(prevEq)){
            prevEq = newEq;
            newEq = removeSingleBrackets(newEq);
            newEq = replaceMult(newEq);
            newEq = replacePlus(newEq);   
        }

       return (Integer.parseInt(newEq));

    
    }

    public static String removeSingleBrackets(String body){
        ArrayList<String> allMatches = new ArrayList<String>(); 
        Matcher m = Pattern.compile("\\([0-9]+\\)").matcher(body); //find any number surrounded by brackets like (4) and turn it into 4
        while (m.find()) {
            allMatches.add(m.group());
        }
        for (String num : allMatches){
            String thisNum = num.substring(1,num.length()-1);
            body = body.replace(num,thisNum);
        }

        return body;
    }

    public static String replaceMult(String body){ // find multiplications and replace them with the result
        ArrayList<String> allMatches = new ArrayList<String>(); //find any number surrounded by brackets like (4) and turn it into 4
            Matcher m = Pattern.compile("([0-9]+\\*[0-9]+)+(\\*[0-9])*").matcher(body); //anything like 5*3*3432
            while (m.find()) {
                allMatches.add(m.group());
            }

        for (String chain : allMatches){
            int product = 1;
            ArrayList<String> eachChain = new ArrayList<String>(Arrays.asList(chain.split("\\*")));
            for (String num : eachChain){
                product *= Integer.parseInt(num);
            }
            body = body.replace(chain,String.valueOf(product));

        }
        return body;
    }

    public static String replacePlus(String body){ // find additions  and replace them with the result
        ArrayList<String> allMatches = new ArrayList<String>(); 
            Matcher m = Pattern.compile("([0-9]+\\+[0-9]+)+(\\+[0-9])*").matcher(body); //anything like 5+3+3432
            while (m.find()) {
                allMatches.add(m.group());
            }

        for (String chain : allMatches){
            int sum = 0;
            ArrayList<String> eachChain = new ArrayList<String>(Arrays.asList(chain.split("\\+")));
            for (String num : eachChain){
                sum += Integer.parseInt(num);
            }
            body = body.replace(chain,String.valueOf(sum));

        }
        return body;
    }

    
}

class Evaluater{
    private ArrayList<Function> functions;
    private ArrayList<String> allInput;
    private int finalValue; //should store the final value 
    private Stack<Function> stack = new Stack<Function>();
    private boolean diverges = false;

    public Evaluater(){
        functions = new ArrayList<Function>();
        finalValue = finalValue;
        stack = stack;
        diverges = diverges;
    }



    public void checkValidFunctions() throws CustomErrorMessage{ // check if any functions call inexistent functions or function is defined teice
        ArrayList<String> functionNames = new ArrayList<String>();
        for (Function f : functions){
            functionNames.add(f.getName());
        }

        for (int i = 0; i < functionNames.size(); i++){
            String fName = functionNames.get(i);
            functionNames.remove(i);
            if (functionNames.contains(fName)){
                Function thisF = getFunctionByName(fName);
                throw new CustomErrorMessage("Function (" + thisF.getName() + ") is defined more than one", thisF.getLine());
            }
            functionNames.add(i,fName);
        }



        for (Function f : functions){ // go through each defined functions and extract the called functions and check them against the defined ones in functionNames
            ArrayList<String> thisCalledFuncs = f.getCalledFunc();
            if (thisCalledFuncs.size() > 0)
                for (String fName : thisCalledFuncs) {
                    if (!functionNames.contains(fName)){
                        throw new CustomErrorMessage("Function (" + f.getName() + ") calls undefined function (" + fName + ")", f.getLine());
                    }
                }
            
        }
    }

    public Function getFunctionByName(String name) throws CustomErrorMessage{ // give it a name, it gives you back the function with that name
        for (Function f : functions)
            if (f.getName().equals(name))
                return f;

        throw new CustomErrorMessage("no function called this",0);
    }

    public int totalExtractedFunctionCalls(){
        int total = 0;
        for (Function f : functions){
            total += f.extractCalledFunctions().size();
        }
        return total;
    }
    
    public String startEvalauting() throws ParseException, CustomErrorMessage, ScriptException{
        checkValidFunctions(); // check if any functions call inexistent functions, if not throw error
        int totalExtracted = totalExtractedFunctionCalls();

        Function startPoint = getFunctionByName("MAIN");
        int totalCalls = 0;
        while (startPoint.hasCalledFunctions()){
            ArrayList<String> startCalledFuncs = startPoint.extractCalledFunctions();
            while (startCalledFuncs.size() > 0){
                String firstCF = startCalledFuncs.get(0);
                String bodyOfCalledFunction = startPoint.getBodyOfCalledFunction(firstCF, startPoint.getBody()); // the body of the called function, the parameter to the function 
                String entireInternalFuncCall = firstCF + "(" + bodyOfCalledFunction + ")"; // entire call of the function
                Function actualCalledFunction = getFunctionByName(firstCF); // getting the actual object of the function
                String newBody = actualCalledFunction.replaceParam(bodyOfCalledFunction); // calling this function replacing the paramter with whatever needs replacing
                startPoint.updateBody(startPoint.getBody().replace(entireInternalFuncCall,"(" + newBody + ")")); // replacing the old body with the new decomposed one
                startCalledFuncs = startPoint.extractCalledFunctions();
                totalCalls ++;
                if (totalCalls > totalExtracted)
                    return "DIVERGENCE";
                
            }
        }
        return startPoint.getBody();
    }
    // this function takes a string like: ADDFOUR x { x+4 }
    // splits it into the relevent parts to make it a function object and then adds it to the list of functions
    public void addFunctionFromString(String func, int lineNo) throws ParseException{ 
        //initialising these vaiables to be able to grep the fields from the plain text
        String name = "";
        String body = "";
        String namedParam = "";

        //grepping the fields by pattern
        Matcher matcher = Pattern.compile("[A-Z]+").matcher(func);
        if (matcher.find()){
            name = matcher.group();}

        matcher = Pattern.compile("\\{ (.)+ \\}").matcher(func);
        if (matcher.find()){
            body = matcher.group();
            body = body.substring(2,body.length() - 2);
        }

        matcher = Pattern.compile("[a-z]+").matcher(func);
        if (matcher.find()){
            namedParam = matcher.group();}
        
     //   System.out.println("\nname: " + name + "\nbody: " + body + "\nnamedparam: " + namedParam);

        Function newFunc = new Function(name, body, namedParam, lineNo); // initialising the object
        functions.add(newFunc); // add the new formed function

    }
}

// all passed functions are passed here for processing
class Function { 
    private String name; // name of this function
    private String body;
    private String namedParam;
    private int line;
    private ArrayList<String> calledFunctions; // name of all the called functions within this

    // constructor for when a function is found
    public Function(String givenName, String givenBody, String givenNamedParam, int givenLine){
        name = givenName;
        body = givenBody;
        line = givenLine;
        namedParam = givenNamedParam;
        calledFunctions = new ArrayList<String>();
        calledFunctions =  extractCalledFunctions();
    }

    // constructor when it is being processed in the stack
    public Function(String givenName, String givenBody){
        name = givenName;
        body = givenBody;
        calledFunctions = new ArrayList<String>();
        calledFunctions =  extractCalledFunctions();
    }

    public String replaceParam(String givenFuncBody){
        return (body.replace(namedParam,"(" + givenFuncBody + ")")); //adding brackets for distributivity law etc
    }

    public String getBodyOfCalledFunction(String givenCalledFunction, String bodyToFunc){ // helper function to replace a called function, replace a param with a body
        int leftBracket = 1; //  count the number of left and right brackets and once they equal the paramter has ended
        int rightBracket = 0;
        int bodyStart = bodyToFunc.indexOf(givenCalledFunction) + givenCalledFunction.length() + 1;
        int index = bodyStart;

        
        while (leftBracket != rightBracket){
            if (Character.toString(bodyToFunc.charAt(index)).equals("("))
                leftBracket++;
            if (Character.toString(bodyToFunc.charAt(index)).equals(")"))
                rightBracket++;
            
            index ++;
        }
        //System.out.println(givenCalledFunction + " " + bodyToFunc + " " + bodyToFunc.substring(bodyStart,index-1));
        return bodyToFunc.substring(bodyStart,index-1);
    }

    public ArrayList<String> extractCalledFunctions(){ //getting the called functions
        ArrayList<String> allMatches = new ArrayList<String>();

        Matcher m = Pattern.compile("[A-Z]+").matcher(getBody());
        while (m.find()) {
            allMatches.add(m.group());
        }

        return allMatches;
        
    }

    public boolean hasCalledFunctions(){
        return (extractCalledFunctions().size() != 0);
    }

    // when this is called by the master functions class, it should:
    // 1) take an internal called funtion
    // 2) find the function with that name
    // 3) call replaceParam on that function with the passed param 
    // 4) then call replaceFuncCall on this function, giving back a decomposed function
    public String replaceFuncCall(String original, String replacer){ 
        return body.replace(original,replacer);
    }

    // getter functions
    public String getName(){return name;}

    public String getBody(){return body;}

    public String getNamedParam(){return namedParam;}

    public int getLine(){return line;}

    public ArrayList<String> getCalledFunc(){return calledFunctions;}

    public void updateBody(String newBody){body = newBody;}

}


class CustomErrorMessage extends Throwable {
    private String message;
    private int line;
   
    // Constructor, not really 
    public CustomErrorMessage(String givenMessage, int givenLine) {
        message =  givenMessage;
        line =  givenLine;
    }


    public String getMessage() {
        return message;
    }

    public int getLine() {
        return line;
    }
}

    
PARSER_END(Assignment)


TOKEN: { 
      <LBRACKET: ("(")> 
    | <RBRACKET: (")")> 
    | <LBRACE: ("{")> 
    | <RBRACE: ("}")> 
    | <SEMICOLON: (";")> 
    | <DEF: ("DEF") >
    | <MAIN: ("MAIN")> 
    | <NUM: ((["1"-"9"])+(["0"-"9"])*) | "0">  //either a 0 or a positive number number 
    | <PLUS: ("+")> 
    | <MULT: ("*")> 
    | <SPACE: (" ")> 
    | <FUNCNAME: (["A"-"Z"])+> 
    | <PARAM: (["a"-"z"])+> 
    | < EOL: "\n" > }
    


void Start() throws ParseException,CustomErrorMessage:{}

{ splitLines() <EOF> End()

 }
    
void splitLines() throws ParseException,CustomErrorMessage:{Token t;} //this is to be able to separate each line and determine whether it's a main func of general func (mf/gf resp.)
{
     (<DEF> <SPACE> (<MAIN> MF() | <FUNCNAME> GF()) <SPACE> <SEMICOLON> <EOL>)+
}
    
void WHICHFUNC() throws ParseException,CustomErrorMessage:{} //determining whether the line is a function def or a main def
{
   LOOKAHEAD(2)   GF() |  MF()
}

void GF() throws ParseException, CustomErrorMessage:{Token param;} //grammar for a general function
{
    <SPACE> 
    param = <PARAM>
    <SPACE> <LBRACE> <SPACE> EXP(param) <SPACE> <RBRACE>

  
}

void MF() throws ParseException, CustomErrorMessage:{} //grammar for the main function
{
    {   
        if (mainDefined) {
            throw new ParseException("Main function can only be defined once");
        } else {
            mainDefined = true;
        }
    }
    <SPACE> <LBRACE> <SPACE> EXPMAIN() <SPACE> <RBRACE>
}



void EXP(Token p) throws ParseException, CustomErrorMessage :{Token exactParam;}  //this is whatever can be within the braces of func definition, the body of a function declaration

    
{ 

    (FUNCCALL(p) | <NUM> | exactParam = <PARAM>
    
    {if (!(exactParam.image).equals(p.image)){
        throw new CustomErrorMessage("Expected parameter " + p.image + ", was given, " + exactParam.image + " ", exactParam.beginLine);
    }}
    )

    
    ( (<MULT> | <PLUS>) ( FUNCCALL(p) | <NUM> | exactParam = <PARAM> 

    {if (!(exactParam.image).equals(p.image)){ //checking the passed parameter is the same as the one mentioned in the func def
        throw new CustomErrorMessage("Expected parameter was: " + p.image + ", was given: " + exactParam.image, exactParam.beginLine);
    }}
    ))*



}

void EXPMAIN() throws ParseException,CustomErrorMessage:{}  //this is whatever can be within the braces of main definition, the body of a function declaration. 
{
    ((<NUM> | FUNCCALLMAIN()) ((<MULT> | <PLUS>)( FUNCCALLMAIN() | <NUM> ))*)
}



void FUNCCALL(Token p) throws ParseException,CustomErrorMessage:{} //this the syntax of a call to a function, which would be within the body of a function decl i.e foo(bar()*5)) 
{
    <FUNCNAME> <LBRACKET> EXP(p) <RBRACKET>

}

void FUNCCALLMAIN() throws ParseException,CustomErrorMessage:{Token t;} //this the syntax of a call to a main function, which would be within the body of a function decl i.e foo(bar()*5)) 
{
    <FUNCNAME> <LBRACKET>  EXPMAIN() <RBRACKET>


}

void End () throws ParseException,CustomErrorMessage:{}{
    {if (!mainDefined) {
        throw new CustomErrorMessage("Missing MAIN function",0);
        }
    }
}